2015-04-23 23:07:19
[7()]
semaphore 的整数值的含义是：
    -2      有2个家伙在等
    0       都在用了(没人在等，也没妹子~)
    3       还有三个妹子 [抖眉坏笑]
    
[8()]
设想一个圆形的房间，里面是妹子们等待接客
这个房间一周都有门外接长长的通道与嫖客们等待的前厅连接
一个通道连接的前厅只能等一个嫖客
嫖客等待间里有一个按钮，按一下可以知道当前有几个妹子(3个？0个？..)
如果发现有妹子，嫖客立马冲进通道，站在妹子房间的门外等着老鸨开门
可以想见，你看到有妹子的时候，别的两个嫖客也看到了
你们三个都冲进去等在各自的门前
老鸨拿一个幸运转轮转一下，指到哪个门前，她就打开那扇门，让那个幸运的嫖客来领妹子去happy
而你呢，得可怜地继续在门前等着，直到有available的妹子

require之前无法知道是否会block的原因是，你不知道你冲进走廊的时候，是否有别的嫖客也冲进了他们的走廊
如果有，你就会block；如果没有，you're lucky
但你无法知道~

看样子好像如果你知道有2个人已经等在了门前时(显示-2)，一定会block？
不一定，你冲进走廊到达门前的这段时间里，可能正好有3个妹子完事回到接客房间了
同样道理，你看到显示+2时，也可能在你冲刺的时间里，她们被冲得更快的嫖客们领走了

这里的关键是，至多可以把按钮询问做成一个原子操作，但冲走廊这件事，是你们嫖客们自己的事情，无法保证谁先到谁后到

2015-04-24 09:20:55
[8()]
"In general, there is no way to know before a thread decrements a semaphore whether it will block or not."
初看之下，怎么会不能提前知道呢？semaphore内在不就是个整数吗？我wait()之前get()一下不就知道了？
我们看下面的语句：

    while s.get() <= 0:
        s.wait()
    # 有妹子!
    
但是设想这样的thread执行：

                    s = Semaphore(1)
    # Thead A                       # Thread B
    while s.get() <= 0:     |
        s.wait()            |
                            |       s.wait()
                            |       # 有妹子！
    # 还有妹子吗?           |
    
以及：

                    s = Semaphore(1)
    # Thead A                       # Thread B
    while s.get() <= 0:     |
        s.wait()            |
    # 确实有妹子            |
                            |       s.wait()
                            
所以总的来说，你无法知道
这里的关键是，原子操作(.get, .wait)之外，所有线程间语句的执行是non-deterministic的

2015-04-24 10:17:41
推广了一下 Rendezvous pattern:

    from threading import Thread, Semaphore
    import threading
    import time
    import random

    class Rendezvous(object):

        def __init__(self, nThreads=2):
            self.__nThreads = nThreads
            self.__semaphores = [[Semaphore(0), None] for _ in range(nThreads)]

        def waitOthers(self):
            me = threading.current_thread().ident
            for i, (s, owner) in enumerate(self.__semaphores):
                if owner is None:
                    self.__semaphores[i][1] = me
                    for _ in range(self.__nThreads - 1):
                        s.release()
                    break
            else:
                msg = 'More threads wait on a {}-ary Rendezvous'.format(
                        self.__nThreads
                        )
                raise RuntimeError(msg)
            for s, owner in self.__semaphores:
                if owner == me:
                    continue
                s.acquire()

    r = Rendezvous(3)

    def a():
        print 'a1'
        r.waitOthers()
        print 'a2'

    def b():
        print 'b1'
        r.waitOthers()
        print 'b2'

    def c():
        print 'c1'
        r.waitOthers()
        print 'c2'

    fs = [a, b, c]
    random.shuffle(fs)
    for t in [Thread(target=f) for f in fs]:
        t.start()
        

rendezvous 必须预先知道有几个thread
就像同学聚会，大家商量好人到齐了才开饭，那么必须预先知道有几个人，否则到底来几个人后开饭呢？

2015-04-24 10:28:33
[16()]
哈，这里也提到《The Lord of the Flies》，说里面的海螺相当于一个mutex

2015-04-24 11:08:58
重写 n-ary rendezvous:

    class Rendezvous(object):

        def __init__(self, nThreads=2):
            self.__nThreads = nThreads
            self.__nArrived = 0
            self.__nArrived_lock = Semaphore(1)
            self.__allArrived = Semaphore(0)

        def waitOthers(self):
            self.__nArrived_lock.acquire()
            self.__nArrived += 1
            self.__nArrived_lock.release()
            if self.__nArrived == self.__nThreads:
                for _ in range(self.__nThreads - 1):
                    self.__allArrived.release()
            else:
                self.__allArrived.acquire()

这里的逻辑是，最后一个人才会看到 nArrived == nThreads，然后放行其他人，他自己直接放行不需要通过semaphore
也可以每个inc后都告诉其他人有一个人到了，但这样会多执行很多for
ps: allArrived 更应该叫做 allArrivedCalls ，表示都到了这个消息通过电话通知给其他人


[29()]
作者代码的逻辑是：最后一个人不会在wait处block(他自己signal了一次)
然后他去signal另一个人(其他人里头任选一个)，这个人再去signal下一个
这么一个串一个，最后一个人多signal了一次，不过这没啥影响

2015-04-24 19:50:35
[31()]
按自己的思路来的 reusable barrier，亦即每个线程都是循环往复经过 rendezvous

    ...
    if self.__nArrived == self.__nThreads:
        self.__nArrived = 0
        for _ in range(self.__nThreads):
            self.__allArrived.release()
    ...
    
觉得这个思路挺清楚的，大家都到了之后，状态重置为初始，然后大家开饭
有的人吃得快有的人吃得慢，吃的快的去下一个饭局先等着(还是同一拨人的饭局)
对于这些人(吃得快的)，他们看到的 Rendezvous 的状态跟初始是一样的

2015-04-24 21:38:09
[31()]
呃，对 reusable barrier 的理解有误(感觉你妹这也是你作者没说明白啊)
其实应该是，critical point 后面也有一个 rendezvous
可以推广理解成，n个线程各自的代码被划分成一些块，所有线程中编号为1的块执行完要synchronize，然后继续，编号为2的块执行完也要synchronize，编号为3的... 以此类推

然后是，可以用一个queue来做test，每个线程往queue里放"a1", "b2"这样的token表示某一句被执行过了
完了主线程检查queue里的内容，确保满足一定的规则，比如 "a1 b1 c1 b2 a2 c2"


感觉自己之前改写出的 reusable barrier 还是能用呃：

    # block 1
    rendezvous.waitOthers()
    # block 2
    rendezvous.waitOthers()
    # ...
    # block n
    rendezvous.waitOthers()
    
不过还是需要测试来确认下

2015-04-24 22:41:17
擦..感觉写测试比较难，先不写了，，看书吧

2015-04-24 22:50:30
[43()]
signal n 次的做法就跟我的很像了，，但是他还是用了(除lock外的)两个semaphore
而我只用一个(虽然不知道自己的是否严格正确)

2015-04-24 23:09:30
[45()]
看累了，先歇了

2015-04-26 15:12:04
[49()]
queue 跟 rendezvous 不同的地方在于
假设现在有5个boy等在各自的门前(门后是走廊，所有走廊通向同一个房间，房间里只有一张床)
现在两个妹子到了，她们各自signal了一个boy(同时因为她们到达时已经有足够的boy在等待，所以她们可以直接proceed)
现在，可以进走廊的是两男两女
要求的情况是，一男一女进房间，执行fuck，再一男一女...
但是可能出现这样的情况，两个男的先通过走廊进了房间，执行了fuck... [吐]
或者两个女的进了房间，执行了... 虽然[口水]，但依旧不合语义

2015-04-26 15:39:29
艹，girls 写成 [.. [b] * 2] 结果debug了半天

逻辑是这样的：
    前面到达的两类/个 semaphore 没有变化
    给男的和女的各准备一把且只有一把房间钥匙
    进了走廊之后，只有拿到钥匙的那个boy/girl才能进房间
    进去之后，等另一方高潮结束自己才能离开——双方谁先高潮无所谓，但一方高潮之后必须等另一方高潮完毕 (这里的高潮就是双方要合作完成的事情)
    离开房间交出钥匙
    
虽然这里看起来可能会出现一个男的先出了房间，另一个男的已经进来，而跟之前那个男的配对的妹子还没出去的情况
但这是ok的，妹子已经高潮过了


下来直接想想怎么generalize到n-ary分工合作

2015-04-26 16:32:08
[53()]
作者的写法很有趣呃，还真是把semaphore变成一个queue了
wait就是等在queue里，由别人来signal自己出队

他的等待finish的写法是asymmetric的，不过也没啥问题


==，这里只用一个mutex的写法好炫酷... [发呆] 我琢磨琢磨

2015-04-26 16:45:42
呃，逻辑如下：
    mutex相当于一个盒子的钥匙，这个盒子里能看到自己/对方等待人数的信息
    只有操作过盒子的人才能进场跳舞
    任何先到的一方，看了盒子之后发现没法跳，都要交回钥匙然后等在队列里，，这一条路径两边是symmetric的
    因为先到的都会交回钥匙，所以后到的人总能拿到钥匙
    拿了钥匙看到对方有等待的人，就signal出一个一起进场跳舞，，注意这里是带着钥匙的，所以后来的人都会等着拿钥匙
    asymmetric的地方发生在交钥匙时，如果是leader后到拿钥匙，那么跳完舞是他来交的；如果是follower后到拿钥匙，那么跳完舞是把钥匙给leader然后由leader来交的
    
写到这里感觉，mutex是不是担负了两个作用？既当了lock，又当了token(令牌环中的令牌)
先到的人只用了lock这个功能——因为他反正现在没法进场，所以必须交还钥匙给后来的对方提供lock作用
而后来的人，用了lock之后，还能当token用

2015-04-26 17:04:16
所以感觉复杂一些的同步问题要把semaphore和常规变量一起用
哪怕semaphore的底层其实记录了+n -n等信息，一般来说我们也不能用(因为拿到之后可能变成invalid的)
但是这个问题里，由于有mutex保护，是不是理论上可以不要常规变量而直接利用queue的信息？

咦，书里说queue的值可能positive，，如果这样的话恐怕不能利用了
哦，明白了，先到的人在wait之前已经释放了mutex，所以在他执行wait从而将queue置为负之前，另一边可能已经读到常规变量的正值从而执行了queue的signal
这钟情况下就会queue值为正

2015-04-26 20:09:57
FIFO queue，有意思，用无序的semaphore实现有序的signal，有点像ip之上建立tcp

擦.. 也就是用一个 queue 和 n 个 semaphore 就行了..

2015-04-26 20:20:39
第三章看完了，下来第四章 Classical synchronization problems
就是 consumer/producer, reader/writer 那些

2015-04-26 21:07:02
好像一对多、多对多时，consumer里只用一个wait也没问题

2015-04-26 21:17:46
producer 的 items.release 放在 lock.release 之后，可以避免对 consumer 不必要的 block —— 即 items.release 之后切换去 consumer，但 lock 仍被 producer 拿着，consumer 即使 acquire 到了 item 也没法操作 buffer，还得等切换回 producer 让它把 lock 释放掉
这么看来python里的condition variable是不是有点瑕疵？

2015-04-26 22:26:13
记得reader/writer的同步没这么麻烦呃，还是自己记错了？反正这次写的挺麻烦
靠event while来弄的

2015-04-26 23:06:11
呃，lightswitch pattern，，自己是没想到

2015-11-10 17:55:15
写了一个线程运行模拟的小lib，可以得到所有可能的执行序列
然后慢慢分析哪些情况下运行与预期不符
